name: Generate game builds
on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
  workflow_dispatch:

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  # 检查UNITY_SERIAL
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  # 获取激活文件
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file 🔑
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        # https://github.com/game-ci/unity-request-activation-file/releases/
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
        with:
          unityVersion: 2018.4.36f1
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

      - name: set UNITY_LICENSE
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: "UNITY_LICENSE"
          value: echo "${{ steps.getManualLicenseFile.outputs.filePath }}"
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # 构建
  build:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - Android
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v2
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Test
      #- name: Run tests
      #  uses: game-ci/unity-test-runner@v2
      #  env:
      #    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      #  with:
      #    githubToken: ${{ secrets.GITHUB_TOKEN }}
      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  # 分布
  createRelease:
    needs: [build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Download StandaloneOSX
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneOSX
          path: build/StandaloneOSX
      - name: Download StandaloneWindows
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneWindows
          path: build/StandaloneWindows
      - name: Download StandaloneWindows64
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneWindows64
          path: build/StandaloneWindows64
      - name: Download StandaloneLinux64
        uses: actions/download-artifact@v2
        with:
          name: Build-StandaloneLinux64
          path: build/StandaloneLinux64

      - name: Zip StandaloneOSX
        run: zip -r StandaloneOSX.zip build/StandaloneOSX
      - name: Zip StandaloneWindows
        run: zip -r StandaloneWindows.zip build/StandaloneWindows
      - name: Zip StandaloneWindows64
        run: zip -r StandaloneWindows64.zip build/StandaloneWindows64
      - name: Zip StandaloneLinux64
        run: zip -r StandaloneLinux64.zip build/StandaloneLinux64

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: |
            StandaloneOSX.zip,
            StandaloneWindows.zip,
            StandaloneWindows64.zip,
            StandaloneLinux64.zip
          tag: "${{ github.run_number }}"
          name: "Development release #${{ github.run_number }}"
          token: ${{ secrets.GITHUB_TOKEN }}
